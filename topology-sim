#!/usr/bin/env python3

import os
import argparse
import sys
import yaml
import json
import copy
import shutil
import tarfile
import urllib.request
import time

vethNum = 0
tunnelNum = 1
namespace_to_pod = {}

def get_config(config_path):
    with open(config_path) as FH:
        return yaml.safe_load(FH)

def serial_for_dut(dut_name, hardware):
    for site, site_config in hardware["sites"].items():
        for pod, pod_config in site_config["pods"].items():
            if "serial" in pod_config:
                for serial, serial_info in pod_config["serial"].items():
                    if serial_info["dut_name"] == dut_name:
                        return pod_config["host"], serial
    return None, None

def get_pod_site(pod, hardware):
    for site, site_config in hardware["sites"].items():
        for curr_pod in site_config["pods"]:
            if curr_pod == pod:
                return site
    return None


def get_pod(member, hardware):
    for site, site_config in hardware["sites"].items():
        for pod, pod_config in site_config["pods"].items():
            for dev, dev_info in pod_config["ethernet"].items():
                if member["dut_name"] == dev_info["dut_name"] and member["dut_port"] == dev_info["dut_port"]:
                    return pod
    return None

def get_netdev(member, hardware):
    if member["type"] == "dut":
        for site, site_config in hardware["sites"].items():
            for pod, pod_config in site_config["pods"].items():
                for dev, dev_info in pod_config["ethernet"].items():
                    if member["dut_name"] == dev_info["dut_name"] and member["dut_port"] == dev_info["dut_port"]:
                                return dev
    elif member["type"] == "sim_wired_client":
        return f"veth{vethNum}"
    else:
        raise TypeError(f"member type: {member['type']} unknown")

    return None

def create_tunnel(left_site, right_site, hardware, ret, left_bridge_name, right_bridge_name):
    global tunnelNum
    left_site_info = hardware["sites"][left_site]
    left_pod = left_site_info["tunneling_pod"]
    right_site_info = hardware["sites"][right_site]
    right_pod = right_site_info["tunneling_pod"]
    ret[left_pod]["tunnels"][f"gretap{tunnelNum}"] = {
        "type": "gretap",
        "key": tunnelNum,
        "local": left_site_info["pods"][left_pod]["host"],
        "remote": right_site_info["pods"][right_pod]["host"],
    }
            
    ret[right_pod]["tunnels"][f"gretap{tunnelNum}"] = {
        "type": "gretap",
        "key": tunnelNum,
        "local": right_site_info["pods"][right_pod]["host"],
        "remote": left_site_info["pods"][left_pod]["host"],
    }
    ret[left_pod]["bridges"][left_bridge_name]["virtual_members"].append(f"gretap{tunnelNum}")
    ret[right_pod]["bridges"][right_bridge_name]["virtual_members"].append(f"gretap{tunnelNum}")
    tunnelNum += 1
            

def add_pod_to_gen_config(pod, pod_info, ret):
    pod_config = {
                "bridges": {},
                "tunnels": {},
                "namespaces": {},
                "veth_pairs": {},
            }
    ret[pod] = copy.deepcopy(pod_config)
    ret[pod]["wan_bridge"] = copy.deepcopy(pod_info["wan_bridge"])
    ret[pod]["trunk_ports"] = copy.deepcopy(pod_info["trunk_ports"])


def get_bridge_name(bridge, bridge_config, pod, hardware):
    bridge_name = bridge
    if bridge_config["wan"]:
        pod_name = bridge_config["wan"]
        site = get_pod_site(pod_name, hardware)
        bridge_name = hardware["sites"][site]["pods"][pod_name]["wan_bridge"]["name"]
    return bridge_name

def gen_config(config, hardware):
    global vethNum, namespace_to_pod
    pod_to_site = {}
    bridge_to_vlan = {}
    vlan_number = 1
    ret = {}
    for site, site_info in hardware["sites"].items():
        for pod, pod_info in site_info["pods"].items():
            add_pod_to_gen_config(pod, pod_info, ret)
            pod_to_site[pod] = site
    for bridge, bridge_config in config["bridges"].items():
        vlan_number = vlan_number + 1
        bridge_to_vlan[bridge] = vlan_number
        sites = set()
        for member in bridge_config["members"]:
            if member["type"] == "dut":
                member_list = "physical_members"
                pod = get_pod(member, hardware)
                if pod is None:
                    print(f"Configured member name:{member['dut_name']}, port:{member['dut_port']} not found in the hardware config")
                    sys.exit(1)
            elif member["type"] == "sim_wired_client":
                member_list = "virtual_members"
                pod = member["pod"]

            sites.add(pod_to_site[pod])
            bridge_name = get_bridge_name(bridge, bridge_config, pod, hardware)
            if bridge_name not in ret[pod]["bridges"]:
                ret[pod]["bridges"][bridge_name] = {
                        "vid": vlan_number if bridge_name == bridge else 1,
                        "physical_members": [],
                        "virtual_members": [],
                }
            ret[pod]["bridges"][bridge_name][member_list].append(get_netdev(member, hardware))
            
            if member["type"] == "sim_wired_client":
                next_veth = vethNum + 1
                ret[pod]["veth_pairs"][f"veth{vethNum}"] = f"veth{next_veth}"
                vethNum = next_veth
                ret[pod]["namespaces"][member["namespace"]] = {
                    "client_type": "wired", "port": f"veth{vethNum}"
                }
                vethNum += 1
                namespace_to_pod[member["namespace"]] = pod
        if bridge_config["wan"]:
            sites.add(pod_to_site[bridge_config["wan"]])

        sorted_bridge_sites = sorted(list(sites))

        for site in sorted_bridge_sites:
            for pod, pod_info in hardware["sites"][site]["pods"].items():
                bridge_name = get_bridge_name(bridge, bridge_config, pod, hardware)
                if bridge_name not in ret[pod]["bridges"]:
                    ret[pod]["bridges"][bridge_name] = {
                            "vid": bridge_to_vlan[bridge] if bridge_name == bridge else 1,
                            "physical_members": [],
                            "virtual_members": [],
                    }

        for index, site1 in enumerate(sorted_bridge_sites):
            for site2 in sorted_bridge_sites[index+1:]:
                site1_bridge = get_bridge_name(bridge, bridge_config, hardware["sites"][site1]["tunneling_pod"], hardware)
                site2_bridge = get_bridge_name(bridge, bridge_config, hardware["sites"][site2]["tunneling_pod"], hardware)
                create_tunnel(site1, site2, hardware, ret, site1_bridge, site2_bridge)


    for swc in config["sim_wireless_clients"]:
        ret[swc["pod"]]["namespaces"][swc["namespace"]] = \
            {"client_type": "wireless", "phy": swc["phy"]}
        namespace_to_pod[swc["namespace"]] = swc["pod"]
    return ret
        

def create_tarball(pod, pod_config):
    tarball_name = f"/tmp/{pod}.tar.gz"
    dir_path = f"/tmp/{pod}"
    if os.path.isdir(dir_path):
        shutil.rmtree(dir_path)
    os.mkdir(dir_path)
    shutil.copyfile("changer.py", f"{dir_path}/changer.py")
    with open(f"{dir_path}/config.json", 'w') as f:
        json.dump(pod_config, f, indent=4)
    with tarfile.open(tarball_name, "w:gz") as tar:
        tar.add(dir_path, arcname=os.path.basename(dir_path))
    return tarball_name

def set_power(host, state):
    f = urllib.request.urlopen(f"http://{host}/cm?cmnd=Power%20{state}")
    f.read()

def power_off(dut, power_config):
    if dut not in power_config:
        print(f"dut:{dut} not found in power config")
    else:
        try:
            set_power(power_config[dut]["host"], "off")
        except Exception as e:
            print(f"{e}: unable to reach dut:{dut} power controller: {host}")

def power_on(dut, power_config):
    if dut not in power_config:
        print(f"dut:{dut} not found in power config")
    else:
        try:
            set_power(power_config[dut]["host"], "on")
        except Exception as e:
            print(f"{e}: unable to reach dut:{dut} power controller: {host}")

def do_power(config, hardware):
    on = set()
    for dut in config["power_on"]:
        power_on.add(dut)
    for switch, switch_info in config["bridges"].items():
        for member_info in switch_info["members"]:
            if member_info["type"] == "dut":
                dut = member_info["dut_name"]
                on.add(dut)
    power_config = hardware["power"]
    for dut in power_config:
        if dut in on:
            power_on(dut, power_config)
        else:
            power_off(dut, power_config)
    print("attempted to power off all hosts")


parser = argparse.ArgumentParser()
parser.add_argument("command", help="command: destroy/create/serial/client",
                    type=str)
parser.add_argument("--config", help="config file")
parser.add_argument("--hardware", help="hardware config file")
parser.add_argument("--namespace", help="namespace of client")
parser.add_argument("--dut", help="dut name for serial connection")

args = parser.parse_args()

config = get_config(args.config if args.config else "config.yaml")
hardware = get_config(args.hardware if args.hardware else "hardware.yaml")
generated = gen_config(config, hardware)
if args.command == "create":
    do_power(config, hardware)
    pids = {}
    for site, site_info in hardware["sites"].items():
        for pod, pod_info in site_info["pods"].items():
            create_tarball(pod, generated[pod])
            pid = os.fork()
            if not pid:
                os.execl("./connect.expect", "connect.expect", "configure", pod_info["host"], pod)
            else:
                pids[pid] = {
                        "name": pod,
                        "host": pod_info["host"]
                        }
    for pid, pid_info in pids.items():
        (pid, exit_code) = os.waitpid(pid, 0)
        if exit_code:
            print(f"pod: {pid_info['name']}, host: {pid_info['host']} resulted in {exit_code} exit_code")


elif args.command == "client":
    pod = namespace_to_pod[args.namespace]
    os.execl("./connect.expect", "connect.expect", "ns", hardware["sites"][get_pod_site(pod, hardware)]["pods"][pod]["host"], args.namespace)
elif args.command == "serial":
    host, tty = serial_for_dut(args.dut, hardware)
    os.execl("./connect.expect", "connect.expect", "serial", host, tty)
elif args.command == "toggle_power":
    power_off(args.dut, hardware["power"])
    time.sleep(2)
    power_on(args.dut, hardware["power"])
elif args.command == "power_off":
    power_off(args.dut, hardware["power"])
elif args.command == "power_off_all":
    power_config = hardware["power"]
    for dut in power_config:
        power_off(dut, power_config)
elif args.command == "power_on":
    power_on(args.dut, hardware["power"])
else:
    print(f"unrecognized command: {args.command}")
